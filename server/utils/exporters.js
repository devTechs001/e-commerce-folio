import PDFDocument from 'pdfkit'
import archiver from 'archiver'

export const createPDFExporter = () => {
  return {
    generate: async (portfolio, user) => {
      return new Promise((resolve, reject) => {
        try {
          const doc = new PDFDocument({ margin: 50 })
          const chunks = []

          doc.on('data', chunk => chunks.push(chunk))
          doc.on('end', () => resolve(Buffer.concat(chunks)))
          doc.on('error', reject)

          // Add header
          doc.fontSize(24)
            .text(portfolio.title, { align: 'center' })
            .moveDown(0.5)

          doc.fontSize(12)
            .text(`Portfolio of ${user.profile.firstName} ${user.profile.lastName}`, { align: 'center' })
            .text(`Generated on ${new Date().toLocaleDateString()}`, { align: 'center' })
            .moveDown(2)

          // Add sections
          portfolio.sections.forEach(section => {
            if (section.isVisible && section.data) {
              doc.fontSize(18)
                .text(section.data.title || `Section ${section.order}`, { underline: true })
                .moveDown(0.5)

              doc.fontSize(12)
              
              if (section.data.content) {
                doc.text(section.data.content, {
                  width: 500,
                  align: 'left'
                })
              }
              
              if (section.data.description) {
                doc.text(section.data.description, {
                  width: 500,
                  align: 'left'
                })
              }

              doc.moveDown(1.5)
            }
          })

          // Add footer
          doc.fontSize(10)
            .text('Generated by E-Folio - Create your own portfolio at efolio.com', { align: 'center' })

          doc.end()
        } catch (error) {
          reject(error)
        }
      })
    }
  }
}

export const createHTMLExporter = () => {
  return {
    generate: async (portfolio, user) => {
      const html = `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${portfolio.title}</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
            background-color: #fff;
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
            padding: 40px 20px;
        }
        .header {
            text-align: center;
            margin-bottom: 40px;
            padding-bottom: 20px;
            border-bottom: 2px solid #0ea5e9;
        }
        .header h1 {
            color: #0ea5e9;
            margin-bottom: 10px;
        }
        .section {
            margin-bottom: 40px;
        }
        .section-title {
            color: #0ea5e9;
            border-bottom: 1px solid #e2e8f0;
            padding-bottom: 10px;
            margin-bottom: 15px;
        }
        .content {
            margin-bottom: 15px;
        }
        .footer {
            text-align: center;
            margin-top: 40px;
            padding-top: 20px;
            border-top: 1px solid #e2e8f0;
            color: #64748b;
            font-size: 14px;
        }
        @media print {
            .container {
                padding: 20px;
            }
            .section {
                page-break-inside: avoid;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>${portfolio.title}</h1>
            <p>Portfolio of ${user.profile.firstName} ${user.profile.lastName}</p>
        </div>
        
        ${portfolio.sections.map(section => `
            <div class="section">
                <h2 class="section-title">${section.data.title || `Section ${section.order}`}</h2>
                ${section.data.content ? `<div class="content">${section.data.content}</div>` : ''}
                ${section.data.description ? `<div class="content">${section.data.description}</div>` : ''}
            </div>
        `).join('')}
        
        <div class="footer">
            <p>Generated by E-Folio on ${new Date().toLocaleDateString()}</p>
        </div>
    </div>
</body>
</html>
      `

      return Buffer.from(html)
    }
  }
}

export const createZIPExporter = () => {
  return {
    generate: async (portfolio, user, assets = []) => {
      return new Promise((resolve, reject) => {
        const archive = archiver('zip', {
          zlib: { level: 9 }
        })

        const chunks = []
        
        archive.on('data', chunk => chunks.push(chunk))
        archive.on('end', () => resolve(Buffer.concat(chunks)))
        archive.on('error', reject)

        // Add HTML file
        const htmlExporter = createHTMLExporter()
        htmlExporter.generate(portfolio, user).then(htmlBuffer => {
          archive.append(htmlBuffer, { name: 'index.html' })
          
          // Add assets
          assets.forEach(asset => {
            if (asset.buffer) {
              archive.append(asset.buffer, { name: `assets/${asset.filename}` })
            }
          })
          
          // Add README
          archive.append(createReadme(portfolio, user), { name: 'README.md' })
          
          archive.finalize()
        }).catch(reject)
      })
    }
  }
}

const createReadme = (portfolio, user) => {
  return `
# ${portfolio.title}

This portfolio was generated using E-Folio.

## Contents
- index.html - Main portfolio page
- assets/ - Portfolio images and files

## Generated Information
- Owner: ${user.profile.firstName} ${user.profile.lastName}
- Generated: ${new Date().toLocaleDateString()}
- Sections: ${portfolio.sections.length}

## How to Use
1. Extract all files to a folder
2. Open index.html in a web browser
3. Upload to any web hosting service

For questions, visit efolio.com
  `
}

export const exportFormats = {
  PDF: 'pdf',
  HTML: 'html', 
  ZIP: 'zip',
  JSON: 'json'
}