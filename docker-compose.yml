version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: ecommerce-folio-db
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: ecommerce_folio
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./database/init.js:/docker-entrypoint-initdb.d/init.js:ro
    networks:
      - ecommerce-network

  # Redis Cache
  redis:
    image: redis:7.2-alpine
    container_name: ecommerce-folio-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ecommerce-network

  # Backend API
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ecommerce-folio-api
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 5000
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/ecommerce_folio?authSource=admin
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      JWT_EXPIRES_IN: 7d
      CORS_ORIGIN: http://localhost:3000,http://localhost:5173
      # Email Configuration
      SMTP_HOST: smtp.gmail.com
      SMTP_PORT: 587
      SMTP_SECURE: false
      SMTP_USER: your-email@gmail.com
      SMTP_PASS: your-app-password
      # Stripe Configuration
      STRIPE_SECRET_KEY: sk_test_your_stripe_secret_key
      STRIPE_PUBLISHABLE_KEY: pk_test_your_stripe_publishable_key
      STRIPE_WEBHOOK_SECRET: whsec_your_webhook_secret
      # Cloudinary Configuration
      CLOUDINARY_CLOUD_NAME: your-cloud-name
      CLOUDINARY_API_KEY: your-api-key
      CLOUDINARY_API_SECRET: your-api-secret
    ports:
      - "5000:5000"
    depends_on:
      - mongodb
      - redis
    volumes:
      - ./uploads:/app/uploads
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend (Development)
  client:
    build:
      context: ./client
      dockerfile: Dockerfile.dev
    container_name: ecommerce-folio-client
    restart: unless-stopped
    environment:
      VITE_API_URL: http://localhost:5000
      VITE_APP_URL: http://localhost:5173
      VITE_NODE_ENV: development
    ports:
      - "5173:5173"
    volumes:
      - ./client:/app
      - /app/node_modules
    depends_on:
      - api
    networks:
      - ecommerce-network

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: ecommerce-folio-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./client/dist:/usr/share/nginx/html:ro
    depends_on:
      - api
    networks:
      - ecommerce-network

volumes:
  mongodb_data:
  redis_data:

networks:
  ecommerce-network:
    driver: bridge
